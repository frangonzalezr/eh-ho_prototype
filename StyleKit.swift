//
//  StyleKit.swift
//  eh_ho
//
//  Created by Fran González Ramos on May 18, 2020.
//  Copyright © 2020 KeepCoding. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// eh·ho branding
    
    class func drawBranding(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 411, height: 549), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 411, height: 549), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 411, y: resizedFrame.height / 549)
        context.restoreGState()
    }
    
    /// eh·ho prototype on iPhone 11 Pro
    
    class func drawUsersIPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1424), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1424), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1424)
        
        /// Fondo Letrero Temas
        let fondoLetreroTemas = UIBezierPath()
        fondoLetreroTemas.move(to: CGPoint.zero)
        fondoLetreroTemas.addLine(to: CGPoint(x: 375, y: 0))
        fondoLetreroTemas.addLine(to: CGPoint(x: 375, y: 150))
        fondoLetreroTemas.addLine(to: CGPoint(x: 0, y: 150))
        fondoLetreroTemas.addLine(to: CGPoint.zero)
        fondoLetreroTemas.close()
        context.saveGState()
        fondoLetreroTemas.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0.9).setFill()
        fondoLetreroTemas.fill()
        context.restoreGState()
        
        /// Magnifier - simple-line-icons
        let magnifierSimplelineicons = NSMutableAttributedString(string: "")
        magnifierSimplelineicons.addAttribute(.font, value: UIFont(name: "simple-line-icons", size: 44)!, range: NSRange(location: 0, length: magnifierSimplelineicons.length))
        magnifierSimplelineicons.addAttribute(.foregroundColor, value: UIColor(hue: 0.075, saturation: 1, brightness: 0.867, alpha: 1), range: NSRange(location: 0, length: magnifierSimplelineicons.length))
        context.saveGState()
        magnifierSimplelineicons.draw(in: CGRect(x: 315, y: 44, width: 44, height: 49))
        context.restoreGState()
        
        /// Plus - simple-line-icons
        let plusSimplelineicons = NSMutableAttributedString(string: "")
        plusSimplelineicons.addAttribute(.font, value: UIFont(name: "simple-line-icons", size: 44)!, range: NSRange(location: 0, length: plusSimplelineicons.length))
        plusSimplelineicons.addAttribute(.foregroundColor, value: UIColor(hue: 0.075, saturation: 1, brightness: 0.867, alpha: 1), range: NSRange(location: 0, length: plusSimplelineicons.length))
        context.saveGState()
        plusSimplelineicons.draw(at: CGPoint(x: 16, y: 45))
        context.restoreGState()
        
        /// Usuarios
        let usuarios = NSMutableAttributedString(string: "Usuarios")
        usuarios.addAttribute(.font, value: UIFont(name: "SFCompactRounded-Regular", size: 44)!, range: NSRange(location: 0, length: usuarios.length))
        usuarios.addAttribute(.foregroundColor, value: UIColor(white: 0.047, alpha: 1), range: NSRange(location: 0, length: usuarios.length))
        context.saveGState()
        usuarios.draw(at: CGPoint(x: 16, y: 106))
        context.restoreGState()
    }
    
    class func drawTopicsIPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1424), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1424), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1424)
        
        /// Fondo Letrero Temas
        let fondoLetreroTemas = UIBezierPath()
        fondoLetreroTemas.move(to: CGPoint.zero)
        fondoLetreroTemas.addLine(to: CGPoint(x: 375, y: 0))
        fondoLetreroTemas.addLine(to: CGPoint(x: 375, y: 150))
        fondoLetreroTemas.addLine(to: CGPoint(x: 0, y: 150))
        fondoLetreroTemas.addLine(to: CGPoint.zero)
        fondoLetreroTemas.close()
        context.saveGState()
        fondoLetreroTemas.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0.9).setFill()
        fondoLetreroTemas.fill()
        context.restoreGState()
        /// Magnifier - simple-line-icons
        let magnifierSimplelineicons = NSMutableAttributedString(string: "")
        magnifierSimplelineicons.addAttribute(.font, value: UIFont(name: "simple-line-icons", size: 44)!, range: NSRange(location: 0, length: magnifierSimplelineicons.length))
        magnifierSimplelineicons.addAttribute(.foregroundColor, value: UIColor(hue: 0.075, saturation: 1, brightness: 0.867, alpha: 1), range: NSRange(location: 0, length: magnifierSimplelineicons.length))
        context.saveGState()
        magnifierSimplelineicons.draw(in: CGRect(x: 315, y: 44, width: 44, height: 49))
        context.restoreGState()
        
        /// Plus - simple-line-icons
        let plusSimplelineicons = NSMutableAttributedString(string: "")
        plusSimplelineicons.addAttribute(.font, value: UIFont(name: "simple-line-icons", size: 44)!, range: NSRange(location: 0, length: plusSimplelineicons.length))
        plusSimplelineicons.addAttribute(.foregroundColor, value: UIColor(hue: 0.075, saturation: 1, brightness: 0.867, alpha: 1), range: NSRange(location: 0, length: plusSimplelineicons.length))
        context.saveGState()
        plusSimplelineicons.draw(at: CGPoint(x: 16, y: 45))
        context.restoreGState()
        
        /// Temas
        let temas = NSMutableAttributedString(string: "Temas")
        temas.addAttribute(.font, value: UIFont(name: "SFCompactRounded-Regular", size: 44)!, range: NSRange(location: 0, length: temas.length))
        temas.addAttribute(.foregroundColor, value: UIColor(white: 0.047, alpha: 1), range: NSRange(location: 0, length: temas.length))
        context.saveGState()
        temas.draw(at: CGPoint(x: 16, y: 106))
        context.restoreGState()
    }
    
    class func drawSplashIPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 375, y: 0))
        rectangle.addLine(to: CGPoint(x: 375, y: 812))
        rectangle.addLine(to: CGPoint(x: 0, y: 812))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.setAlpha(0.92)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            rectangle.usesEvenOddFillRule = true
            UIColor(white: 0.047, alpha: 1).setFill()
            rectangle.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Half Rectangle
        let halfRectangle = UIBezierPath()
        halfRectangle.move(to: CGPoint(x: 375, y: 0))
        halfRectangle.addLine(to: CGPoint(x: 375, y: 812))
        halfRectangle.addLine(to: CGPoint(x: 0, y: 812))
        halfRectangle.addLine(to: CGPoint(x: 375, y: 0))
        halfRectangle.close()
        context.saveGState()
        halfRectangle.usesEvenOddFillRule = true
        UIColor(white: 0.047, alpha: 1).setFill()
        halfRectangle.fill()
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// eh·ho branding
    
    class func imageOfBranding() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 411, height: 549), false, 0)
        StyleKit.drawBranding()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// eh·ho prototype on iPhone 11 Pro
    
    class func imageOfUsersIPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1424), false, 0)
        StyleKit.drawUsersIPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTopicsIPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1424), false, 0)
        StyleKit.drawTopicsIPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSplashIPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawSplashIPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
